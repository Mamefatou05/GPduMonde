/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/api.ts":
/*!********************!*\
  !*** ./src/api.ts ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   readDataFromServer: () => (/* binding */ readDataFromServer),\n/* harmony export */   saveNewCargoToServer: () => (/* binding */ saveNewCargoToServer),\n/* harmony export */   writeDataToServer: () => (/* binding */ writeDataToServer)\n/* harmony export */ });\n// api.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// Fonction pour lire les données du serveur\nfunction readDataFromServer(url) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const response = yield fetch(url);\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const data = yield response.json();\n            return data;\n        }\n        catch (error) {\n            console.error('Error reading data:', error);\n            return;\n        }\n    });\n}\nfunction writeDataToServer(url, newObject) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            const response = yield fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(newObject),\n            });\n            if (!response.ok) {\n                throw new Error('Failed to save data');\n            }\n            console.log('New object saved successfully');\n        }\n        catch (error) {\n            console.error('Error writing data:', error);\n        }\n    });\n}\nfunction saveNewCargoToServer(cargo) {\n    return __awaiter(this, void 0, void 0, function* () {\n        yield writeDataToServer('../php/api.php', cargo);\n    });\n}\n\n\n//# sourceURL=webpack://gpdumonde/./src/api.ts?");

/***/ }),

/***/ "./src/cargaisons.ts":
/*!***************************!*\
  !*** ./src/cargaisons.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   afficherCargaison: () => (/* binding */ afficherCargaison),\n/* harmony export */   fetchCargos: () => (/* binding */ fetchCargos)\n/* harmony export */ });\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils */ \"./src/utils.ts\");\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./api */ \"./src/api.ts\");\n/* harmony import */ var _types_cargaison__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types/cargaison */ \"./src/types/cargaison.ts\");\n/* harmony import */ var _produit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./produit */ \"./src/produit.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a, _b;\n\n\n\n\nlet cargos = [];\nlet filteredCargos = [];\nlet currentPage = 1;\nconst rowsPerPage = 3;\n// mode de remplissage\nconst produitMaxRadio = document.getElementById('produitMaxRadio');\nconst poidsMaxRadio = document.getElementById('poidsMaxRadio');\nconst champProduits = document.getElementById('champ_produits');\nconst champPoids = document.getElementById('champ_poids');\nconst modeRemplissage = document.getElementById('mode_remplissage_hidden');\nconst radios = document.querySelectorAll('input[name=\"mode_remplissage\"]');\nradios.forEach(radio => {\n    radio.addEventListener('change', function () {\n        if (produitMaxRadio.checked) {\n            champProduits.classList.remove('hidden');\n            champPoids.classList.add('hidden');\n            modeRemplissage.value = 'produitMax';\n        }\n        else if (poidsMaxRadio.checked) {\n            champPoids.classList.remove('hidden');\n            champProduits.classList.add('hidden');\n            modeRemplissage.value = 'poidsMax';\n        }\n    });\n});\n// Initialiser\nif (produitMaxRadio.checked) {\n    champProduits.classList.remove('hidden');\n    champPoids.classList.add('hidden');\n    modeRemplissage.value = 'produitMax';\n}\nelse if (poidsMaxRadio.checked) {\n    champPoids.classList.remove('hidden');\n    champProduits.classList.add('hidden');\n    modeRemplissage.value = 'poidsMax';\n}\n// console.log(modeRemplissage);\n// console.log(modeRemplissage.value);\n// Fonction pour récupérer les cargos\nfunction fetchCargos() {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            console.log('Fetching cargos...');\n            const data = yield (0,_api__WEBPACK_IMPORTED_MODULE_1__.readDataFromServer)('../php/api.php');\n            const cargaisons = (data === null || data === void 0 ? void 0 : data.cargaisons) || [];\n            cargos = cargaisons; // Assignation directe puisque c'est un tableau\n            filteredCargos = [...cargos];\n            displayCargos(); // Assurez-vous que cette fonction est définie ailleurs dans votre code\n            console.log('Cargos fetched successfully');\n        }\n        catch (error) {\n            console.error('Error fetching cargos:', error);\n        }\n    });\n}\nfunction afficherCargaison(cargaison) {\n    var _a, _b;\n    const cargaisonName = document.getElementById('cargaison-name');\n    const cargaisonDate = document.getElementById('cargaison-date');\n    const cargaisonDepart = document.getElementById('cargaison-depart');\n    const cargaisonArrivee = document.getElementById('cargaison-arrivee');\n    const cargaisonTags = document.getElementById('cargaison-tags');\n    const produitList = document.getElementById('produit-list');\n    const cargaisonInfo = document.getElementById('cargaison-poids');\n    if (!cargaisonName || !cargaisonDate || !cargaisonDepart || !cargaisonArrivee || !cargaisonTags || !produitList || !cargaisonInfo) {\n        console.error('Un ou plusieurs éléments requis sont manquants dans le DOM');\n        return;\n    }\n    if (cargaison.etat_Avancement === 'en cours') {\n        alert(\"Les détails de cette cargaison ne sont pas disponibles car elle est en cours.\");\n        return;\n    }\n    cargaisonName.textContent = `Cargaison ${cargaison instanceof _types_cargaison__WEBPACK_IMPORTED_MODULE_2__.CargaisonAerienne ? 'Aérienne' : cargaison instanceof _types_cargaison__WEBPACK_IMPORTED_MODULE_2__.CargaisonMaritime ? 'Maritime' : 'Routière'}`;\n    cargaisonDate.textContent = cargaison.dateDepart;\n    cargaisonDepart.textContent = cargaison.dateDepart;\n    cargaisonArrivee.textContent = cargaison.dateArrivee;\n    // Calculer et afficher les informations supplémentaires en fonction du mode de remplissage\n    if (cargaison.mode_remplissage === 'poidsMax') {\n        const poidsTotal = cargaison.produits.reduce((sum, p) => sum + p.poids, 0);\n        const poidsRestant = ((_a = cargaison.poidsMax) !== null && _a !== void 0 ? _a : 0) - poidsTotal;\n        cargaisonInfo.textContent = `Poids restant: ${poidsRestant} kg`;\n    }\n    else if (cargaison.mode_remplissage === 'produitMax') {\n        const produitsRestants = ((_b = cargaison.produitMax) !== null && _b !== void 0 ? _b : 0) - cargaison.produits.length;\n        cargaisonInfo.textContent = `Produits restants: ${produitsRestants}`;\n    }\n    else {\n        cargaisonInfo.textContent = '';\n    }\n    cargaisonTags.innerHTML = '';\n    const tags = [\n        cargaison instanceof _types_cargaison__WEBPACK_IMPORTED_MODULE_2__.CargaisonAerienne ? 'Aérien' : cargaison instanceof _types_cargaison__WEBPACK_IMPORTED_MODULE_2__.CargaisonMaritime ? 'Maritime' : 'Routier'\n    ];\n    tags.forEach(tag => {\n        const tagElement = document.createElement('span');\n        tagElement.className = `bg-blue-200 text-blue-700 px-2 py-1 rounded mr-2`;\n        tagElement.textContent = tag;\n        cargaisonTags.appendChild(tagElement);\n    });\n    produitList.innerHTML = '';\n    cargaison.produits.forEach(produit => {\n        const row = document.createElement('tr');\n        row.innerHTML = `\n            <td class=\"px-6 py-4 whitespace-nowrap\">${produit.libelle}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap\">${produit instanceof _produit__WEBPACK_IMPORTED_MODULE_3__.Alimentaire ? 'Alimentaire' : produit instanceof _produit__WEBPACK_IMPORTED_MODULE_3__.Chimique ? 'Chimique' : produit.typeMateriel}</td>\n            <td class=\"px-6 py-4 whitespace-nowrap\">${produit.poids} kg</td>\n            <td class=\"px-6 py-4 whitespace-nowrap\">${cargaison.calculerFrais(produit) / produit.poids} f cfa</td>\n            <td class=\"px-6 py-4 whitespace-nowrap\">${cargaison.calculerFrais(produit)} f cfa</td>\n        `;\n        produitList.appendChild(row);\n    });\n}\nconst CargaisonList = document.getElementById('CargaisonList');\nconst CargaisonDetail = document.getElementById('CargaisonDetail');\nlet cargaisonCourante = cargos[1];\nfunction detailFonction() {\n    const detailButtons = document.querySelectorAll('.detail-btn');\n    detailButtons.forEach(button => {\n        button.addEventListener('click', (event) => {\n            const target = event.target;\n            const cargoIdString = target.dataset.id; // Récupérez l'ID en tant que chaîne de caractères\n            if (cargoIdString) {\n                const cargoId = parseInt(cargoIdString); // Convertissez l'ID en nombre entier\n                const cargo = filteredCargos.find(cargo => cargo.id === cargoId);\n                if (cargo) {\n                    if (cargo.etat_Avancement === 'en cours') {\n                        alert(\"Les détails de cette cargaison ne sont pas disponibles car elle est en cours.\");\n                        return;\n                    }\n                    cargaisonCourante = cargo;\n                    afficherCargaison(cargaisonCourante);\n                    CargaisonList.classList.add('hidden'); // Masquer la liste des cargaisons\n                    CargaisonDetail.classList.remove('hidden'); // Afficher les détails de la cargaison\n                }\n                else {\n                    console.log('Aucune cargaison trouvée avec cet ID');\n                }\n            }\n            else {\n                console.log(\"L'ID de la cargaison n'est pas défini dans l'attribut dataset\");\n            }\n        });\n    });\n}\nfunction displayCargos() {\n    const tableBody = document.getElementById('cargoTableBody');\n    tableBody.innerHTML = '';\n    const start = (currentPage - 1) * rowsPerPage;\n    const end = start + rowsPerPage;\n    const paginateCargos = filteredCargos.slice(start, end);\n    paginateCargos.forEach(cargo => {\n        const row = document.createElement('tr');\n        row.innerHTML = `\n            <td class=\"border p-2\">${cargo.numero}</td>\n            <td class=\"border p-2\">${cargo.mode_remplissage}</td>\n            <td class=\"border p-2\">${cargo.mode_remplissage === 'produitMax' ? cargo.produitMax : cargo.poidsMax}</td>\n            <td class=\"border p-2\">${cargo.dateDepart}</td>\n            <td class=\"border p-2\">${cargo.dateArrivee}</td>\n            <td class=\"border p-2\">${cargo.prix_total}</td>\n            <td class=\"border p-2\">${cargo.lieu_depart}</td>\n            <td class=\"border p-2\">${cargo.lieu_arrivee}</td>\n            <td class=\"border p-2\">${cargo.distanceKm}</td>\n            <td class=\"border p-2\">${cargo.type}</td>\n            <td class=\"border p-2\">${cargo.etat_Avancement}</td>\n            <td class=\"border p-2\">\n            <button class=\"state-btn\" data-id=\"${cargo.id}\" data-state=\"${cargo.etat_globale}\">\n                ${cargo.etat_globale === 'fermer' ? 'Fermer' : 'Ouvert'}\n            </button>\n        </td>            <td class=\"border p-2\"><button class=\"detail-btn\" data-id=\"${cargo.id}\">Détails</button></td>\n        `;\n        tableBody.appendChild(row);\n    });\n    detailFonction(); // Ajouter les gestionnaires d'événements pour les boutons \"Détails\"\n    FermerOuvert();\n}\n// Fonction pour attacher les gestionnaires d'événements aux boutons d'état\nfunction FermerOuvert() {\n    const stateButtons = document.querySelectorAll('.state-btn');\n    stateButtons.forEach(button => {\n        button.addEventListener('click', (event) => __awaiter(this, void 0, void 0, function* () {\n            const target = event.target;\n            if (!target)\n                return;\n            const id = target.dataset.id;\n            if (id) {\n                yield CargoState(id);\n            }\n        }));\n    });\n}\nfunction CargoState(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const cargo = filteredCargos.find(c => c.id.toString() === id);\n        if (!cargo)\n            return;\n        const currentState = cargo.etat_globale.toLowerCase();\n        const newState = currentState === 'ouvert' ? 'fermer' : 'ouvert';\n        if (currentState === 'fermer' && cargo.etat_Avancement.toLowerCase() !== 'en attente') {\n            alert('La cargaison ne peut pas être rouverte car elle n\\'est pas en attente.');\n            return;\n        }\n        // Mettre à jour l'état sur le serveur\n        try {\n            const response = yield fetch('api.php', {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(Object.assign(Object.assign({}, cargo), { etat_globale: newState }))\n            });\n            if (!response.ok) {\n                const errorMessage = yield response.json();\n                alert(errorMessage.message);\n                throw new Error('Failed to update cargo state');\n            }\n            // Mettre à jour l'état localement si la mise à jour sur le serveur a réussi\n            cargo.etat_globale = newState;\n            displayCargos();\n        }\n        catch (error) {\n            console.error('Error updating cargo state:', error);\n        }\n    });\n}\n// pagination des tableau\nfunction PaginationFonction() {\n    const pageInfo = document.getElementById('pageInfo');\n    const prevPageButton = document.getElementById('prevPage');\n    const nextPageButton = document.getElementById('nextPage');\n    const totalPages = Math.ceil(filteredCargos.length / rowsPerPage);\n    pageInfo.textContent = `Page ${currentPage} of ${totalPages}`;\n    prevPageButton.disabled = currentPage === 1;\n    nextPageButton.disabled = currentPage === totalPages;\n}\n(_a = document.getElementById('prevPage')) === null || _a === void 0 ? void 0 : _a.addEventListener('click', () => {\n    if (currentPage > 1) {\n        currentPage--;\n        displayCargos();\n    }\n});\n(_b = document.getElementById('nextPage')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', () => {\n    const totalPages = Math.ceil(filteredCargos.length / rowsPerPage);\n    if (currentPage < totalPages) {\n        currentPage++;\n        displayCargos();\n    }\n});\n// let currentFilters = {\n//     searchNumero: '',\n//     dateDepart: '',\n//     dateArrivee: '',\n//     lieuDepart: '',\n//     lieuArrivee: '',\n//     Etat: 'fermer' // Filtre par défaut pour les cargaisons fermées\n// };\n// filtre des donner \nconst searchNumeroElement = document.getElementById('searchNumero');\nconst dateDepartElement = document.getElementById('DateDepar');\nconst dateArriveeElement = document.getElementById('dateArriv');\nconst lieuDepartElement = document.getElementById('lieuDepart');\nconst lieuArriveeElement = document.getElementById('lieuArrivee');\nconst StatutElement = document.getElementById('statut');\nconst EtatElement = document.getElementById('Etat');\nconst reset = document.getElementById('resetFilters');\n// function applyFilters() {\n//     // Check if the date fields are not empty before converting\n//     const FormaDatDep = dateDepartElement.value ? formatDate(new Date(dateDepartElement.value)) : '';\n//     const FormaDatArr = dateArriveeElement.value ? formatDate(new Date(dateArriveeElement.value)) : '';\n//     const searchNumero = searchNumeroElement ? searchNumeroElement.value.toLowerCase() : '';\n//     const dateDepart = FormaDatDep ? FormaDatDep : '';\n//     const dateArrivee = FormaDatArr ? FormaDatArr : '';\n//     const lieuDepart = lieuDepartElement ? lieuDepartElement.value.toLowerCase() : '';\n//     const lieuArrivee = lieuArriveeElement ? lieuArriveeElement.value.toLowerCase() : '';\n//     const statut = StatutElement ? StatutElement.value.toLowerCase() : '';\n//     const etat = EtatElement ? EtatElement.value.toLowerCase() : ''; // Filtre par défaut pour les cargaisons fermées\n//     // console.log(statut);\n//     // console.log(searchNumero, dateDepart, dateArrivee, lieuDepart, lieuArrivee, statut);\n//     filteredCargos = cargos.filter(cargo => {\n//         return (\n//             (searchNumero === '' || cargo.numero.toLowerCase().includes(searchNumero)) &&\n//             (dateDepart === '' || cargo.dateDepart === dateDepart) &&\n//             (dateArrivee === '' || cargo.dateArrivee === dateArrivee) &&\n//             (lieuDepart === '' || cargo.lieu_depart.toLowerCase().includes(lieuDepart)) &&\n//             (lieuArrivee === '' || cargo.lieu_arrivee.toLowerCase().includes(lieuArrivee))&&\n//             (statut === '' || cargo.etat_Avancement.toLowerCase().includes(statut)) &&\n//             (etat === '' || cargo.etat_globale.toLowerCase().includes(etat))  // Filtre par défaut pour les cargaisons fermées\n//         );\n//     });\n//     currentPage = 1;\n//     displayCargos();\n// }\n// function resetFilters() {\n//     searchNumeroElement.value = '';\n//     dateArriveeElement.value = '';\n//     dateDepartElement.value = '';\n//     lieuDepartElement.value = '';\n//     lieuArriveeElement.value = '';\n//     StatutElement.value = '';\n//     EtatElement.value = 'Fermer'; // Filtre par défaut pour les cargaisons fermées\n//     filteredCargos = [...cargos];  // Reset to original data\n//     currentPage = 1;\n//     displayCargos();\n// }\n// // Add input event listeners to call applyFilters when the input changes\n// searchNumeroElement.addEventListener('input', applyFilters);\n// dateDepartElement.addEventListener('input', applyFilters);\n// dateArriveeElement.addEventListener('input', applyFilters);\n// lieuDepartElement.addEventListener('input', applyFilters);\n// lieuArriveeElement.addEventListener('input', applyFilters);\n// StatutElement.addEventListener('input', applyFilters);\n// EtatElement.addEventListener('change', applyFilters);\n// // Add click event listener for the reset button\n// reset.addEventListener('click', resetFilters);\n// Récupération des champs du formulaire\nconst formFields = Array.from(document.querySelectorAll(`#cargaisonForm [data-label]`)).map(field => {\n    const htmlField = field;\n    return {\n        inputId: htmlField.id,\n        errorSpanId: `${htmlField.id}Error`,\n        validator: _utils__WEBPACK_IMPORTED_MODULE_0__.validators[htmlField.dataset.label]\n    };\n});\n// Initialisation du formulaire\nconst submitNewCargo = (formData) => {\n    const { distance, dateDepart, dateArrivee, type_cargaison, lieu_depart, lieu_arrivee, mode_remplissage } = formData;\n    formData.mode_remplissage = modeRemplissage.value;\n    const poidsMaxInput = document.getElementById('poid_max');\n    const produitMaxInput = document.getElementById('produitMax');\n    const poidsMax = poidsMaxInput.value ? parseFloat(poidsMaxInput.value) : null;\n    const produitMax = produitMaxInput.value ? parseInt(produitMaxInput.value) : null;\n    let finalPoidsMax = null;\n    let finalProduitMax = null;\n    if (formData.mode_remplissage === 'poidsMax') {\n        finalPoidsMax = poidsMax;\n        finalProduitMax = null;\n    }\n    else if (formData.mode_remplissage === 'produitMax') {\n        finalPoidsMax = null;\n        finalProduitMax = produitMax;\n    }\n    const distanceKm = parseInt(distance);\n    if (isNaN(distanceKm) || !dateDepart || !dateArrivee || !type_cargaison) {\n        alert(\"Les données du formulaire sont invalides.\");\n        return;\n    }\n    const dateOrderValidation = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.isDateAfter)(dateDepart, dateArrivee);\n    const ErrorDepart = document.getElementById('dateDepartError');\n    const ErrorArrivee = document.getElementById('dateArriveeError');\n    if (!dateOrderValidation.valid) {\n        ErrorArrivee.innerText = dateOrderValidation.errorMessage;\n        return;\n    }\n    else {\n        ErrorArrivee.innerText = \"\";\n        let newCargo;\n        switch (type_cargaison) {\n            case \"maritime\":\n                newCargo = new _types_cargaison__WEBPACK_IMPORTED_MODULE_2__.CargaisonMaritime(distanceKm, dateDepart, dateArrivee, finalPoidsMax, finalProduitMax, lieu_depart, lieu_arrivee, formData.mode_remplissage);\n                break;\n            case \"aerienne\":\n                newCargo = new _types_cargaison__WEBPACK_IMPORTED_MODULE_2__.CargaisonAerienne(distanceKm, dateDepart, dateArrivee, finalPoidsMax, finalProduitMax, lieu_depart, lieu_arrivee, formData.mode_remplissage);\n                break;\n            case \"routiere\":\n                newCargo = new _types_cargaison__WEBPACK_IMPORTED_MODULE_2__.CargaisonRoutiere(distanceKm, dateDepart, dateArrivee, finalPoidsMax, finalProduitMax, lieu_depart, lieu_arrivee, formData.mode_remplissage);\n                break;\n            default:\n                alert(\"Type de cargaison invalide.\");\n                return;\n        }\n        (0,_api__WEBPACK_IMPORTED_MODULE_1__.saveNewCargoToServer)(newCargo)\n            .then(() => {\n            alert(\"Cargaison ajoutée avec succès.\");\n            fetchCargos();\n        })\n            .catch((error) => {\n            alert(`Erreur lors de l'ajout de la cargaison : ${error.message}`);\n        });\n    }\n};\nnew _utils__WEBPACK_IMPORTED_MODULE_0__.Formulaire(\"cargaisonForm\", formFields, submitNewCargo);\nfetchCargos();\n// // Initialiser les filtres par défaut\n// document.addEventListener('DOMContentLoaded', () => {\n//     EtatElement.value = 'fermer';\n//     applyFilters();\n// });\ndetailFonction();\n\n\n//# sourceURL=webpack://gpdumonde/./src/cargaisons.ts?");

/***/ }),

/***/ "./src/produit.ts":
/*!************************!*\
  !*** ./src/produit.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Alimentaire: () => (/* binding */ Alimentaire),\n/* harmony export */   Chimique: () => (/* binding */ Chimique),\n/* harmony export */   Materiel: () => (/* binding */ Materiel),\n/* harmony export */   Produit: () => (/* binding */ Produit)\n/* harmony export */ });\n// Produit.ts\nclass Produit {\n    constructor(libelle, poids) {\n        this.libelle = libelle;\n        this.poids = poids;\n    }\n}\nclass Alimentaire extends Produit {\n}\nclass Chimique extends Produit {\n    constructor(libelle, poids, toxicite) {\n        super(libelle, poids);\n        this.toxicite = toxicite;\n    }\n}\nclass Materiel extends Produit {\n    constructor(libelle, poids, typeMateriel) {\n        super(libelle, poids);\n        this.typeMateriel = typeMateriel;\n    }\n}\n\n\n//# sourceURL=webpack://gpdumonde/./src/produit.ts?");

/***/ }),

/***/ "./src/types/cargaison.ts":
/*!********************************!*\
  !*** ./src/types/cargaison.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cargaison: () => (/* binding */ Cargaison),\n/* harmony export */   CargaisonAerienne: () => (/* binding */ CargaisonAerienne),\n/* harmony export */   CargaisonMaritime: () => (/* binding */ CargaisonMaritime),\n/* harmony export */   CargaisonRoutiere: () => (/* binding */ CargaisonRoutiere),\n/* harmony export */   formatDate: () => (/* binding */ formatDate)\n/* harmony export */ });\n/* harmony import */ var _produit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../produit */ \"./src/produit.ts\");\n\nconst formatDate = (date) => {\n    const day = String(date.getUTCDate()).padStart(2, '0');\n    const month = String(date.getUTCMonth() + 1).padStart(2, '0'); // Months are 0-based\n    const year = date.getUTCFullYear();\n    return `${day}/${month}/${year}`;\n};\nclass Cargaison {\n    constructor(distance, dateDepart, dateArrivee, poidsMax, produitMax, type, lieu_depart, lieu_arrivee, mode_remplissage) {\n        // this.id = ++Cargaison.dernierId; // Increment last number and assign to id\n        this.id = ++Cargaison.dernierId;\n        this.numero = Cargaison.genererNumero(this.id);\n        this.poidsMax = poidsMax;\n        this.produitMax = produitMax;\n        this.prix_total = 0; // Initialize prix_total to 0\n        this.lieu_depart = lieu_depart;\n        this.lieu_arrivee = lieu_arrivee;\n        this.produits = []; // Initialize produits to an empty array\n        this.dateDepart = formatDate(new Date(dateDepart));\n        this.dateArrivee = formatDate(new Date(dateArrivee));\n        this.mode_remplissage = mode_remplissage;\n        this.etat_Avancement = \"En attente\";\n        this.etat_globale = \"ouvert\";\n        this.type = type;\n        this.distanceKm = distance;\n    }\n    static genererIdUnique() {\n        return Date.now();\n    }\n    // private static genrerId(): number {\n    //     return Math.floor(Math.random() * 10);\n    // }\n    static genererNumero(id) {\n        return `CRG${id.toString().padStart(3, '0')}`;\n    }\n    ajouterProduit(produit) {\n        if (this.produitMax && this.produits.length >= this.produitMax) {\n            alert(\"La cargaison est pleine.\");\n            return;\n        }\n        if (this.poidsMax && this.sommePoids() + produit.poids > this.poidsMax) {\n            alert(\"Le poids maximum de la cargaison est atteint.\");\n            return;\n        }\n        if (produit instanceof _produit__WEBPACK_IMPORTED_MODULE_0__.Chimique && !(this instanceof CargaisonMaritime)) {\n            alert(\"Les produits chimiques doivent toujours transiter par voie maritime.\");\n            return;\n        }\n        if (produit instanceof _produit__WEBPACK_IMPORTED_MODULE_0__.Materiel && produit.typeMateriel === \"fragile\" && this instanceof CargaisonMaritime) {\n            alert(\"Les produits fragiles ne doivent jamais passer par voie maritime.\");\n            return;\n        }\n        this.produits.push(produit);\n        console.log(`Produit ajouté: ${produit.libelle}`);\n        console.log(`Montant actuel de la cargaison: ${this.sommeTotale()}`);\n    }\n    sommeTotale() {\n        return this.produits.reduce((total, produit) => total + this.calculerFrais(produit), 0);\n    }\n    sommePoids() {\n        return this.produits.reduce((total, produit) => total + produit.poids, 0);\n    }\n    nbProduits() {\n        return this.produits.length;\n    }\n}\nCargaison.dernierId = 0; // Static attribute to track the last assigned number\nclass CargaisonMaritime extends Cargaison {\n    constructor(distance, dateDepart, dateArrivee, poidsMax, produitMax, lieu_depart, lieu_arrivee, mode_remplissage) {\n        super(distance, dateDepart, dateArrivee, poidsMax, produitMax, \"maritime\", lieu_depart, lieu_arrivee, mode_remplissage);\n    }\n    calculerFrais(produit) {\n        return produit.poids * this.distanceKm * 90;\n    }\n}\nclass CargaisonAerienne extends Cargaison {\n    constructor(distance, dateDepart, dateArrivee, poidsMax, produitMax, lieu_depart, lieu_arrivee, mode_remplissage) {\n        super(distance, dateDepart, dateArrivee, poidsMax, produitMax, \"aerienne\", lieu_depart, lieu_arrivee, mode_remplissage);\n    }\n    calculerFrais(produit) {\n        return produit.poids * this.distanceKm * 100;\n    }\n}\nclass CargaisonRoutiere extends Cargaison {\n    constructor(distance, dateDepart, dateArrivee, poidsMax, produitMax, lieu_depart, lieu_arrivee, mode_remplissage) {\n        super(distance, dateDepart, dateArrivee, poidsMax, produitMax, \"routiere\", lieu_depart, lieu_arrivee, mode_remplissage);\n    }\n    calculerFrais(produit) {\n        return produit.poids * this.distanceKm * 300;\n    }\n}\n\n\n//# sourceURL=webpack://gpdumonde/./src/types/cargaison.ts?");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Formulaire: () => (/* binding */ Formulaire),\n/* harmony export */   isDateAfter: () => (/* binding */ isDateAfter),\n/* harmony export */   validators: () => (/* binding */ validators)\n/* harmony export */ });\nclass Formulaire {\n    constructor(formId, formFields, submitCallback) {\n        this.formId = formId;\n        this.formFields = formFields;\n        this.submitCallback = submitCallback;\n        this.initForm();\n    }\n    initForm() {\n        const form = document.getElementById(this.formId);\n        if (form) {\n            form.addEventListener('submit', (event) => {\n                event.preventDefault();\n                this.validateForm();\n            });\n        }\n    }\n    displayError(errorSpanId, errorMessage) {\n        const errorElement = document.getElementById(errorSpanId);\n        if (errorElement) {\n            errorElement.innerText = errorMessage;\n        }\n    }\n    resetForm() {\n        this.formFields.forEach(field => {\n            const inputElement = document.getElementById(field.inputId);\n            if (inputElement) {\n                if (inputElement instanceof HTMLSelectElement) {\n                    inputElement.selectedIndex = 0;\n                }\n                else {\n                    inputElement.value = '';\n                }\n            }\n            this.displayError(field.errorSpanId, '');\n        });\n    }\n    validateForm() {\n        let isValid = true;\n        const newData = {};\n        this.formFields.forEach(field => {\n            const inputElement = document.getElementById(field.inputId);\n            const value = inputElement.value.trim();\n            const errorSpanId = field.errorSpanId;\n            if (field.validator) {\n                const validation = field.validator(value);\n                if (!validation.valid) {\n                    isValid = false;\n                    this.displayError(errorSpanId, validation.errorMessage || 'Champ invalide');\n                }\n                else {\n                    newData[field.inputId] = value;\n                    this.displayError(errorSpanId, '');\n                }\n            }\n        });\n        if (isValid) {\n            this.submitCallback(newData);\n            this.resetForm();\n        }\n    }\n}\nconst validators = {\n    isNotEmpty: (value) => {\n        const isValid = value.trim().length > 0;\n        return {\n            valid: isValid,\n            errorMessage: isValid ? '' : 'Ce champ ne peut pas être vide.'\n        };\n    },\n    isPositiveNumber: (value) => {\n        const number = parseFloat(value);\n        const isValid = !isNaN(number) && number > 0;\n        return {\n            valid: isValid,\n            errorMessage: isValid ? '' : 'Le poids doit être un nombre positif.'\n        };\n    },\n    isPositiveNumberNull: (value) => {\n        if (value.trim() === '') {\n            return {\n                valid: true,\n                errorMessage: ''\n            };\n        }\n        const number = parseFloat(value);\n        const isValid = !isNaN(number) && number > 0;\n        return {\n            valid: isValid,\n            errorMessage: isValid ? '' : 'Le poids doit être un nombre positif.'\n        };\n    },\n    isValidDate: (value) => {\n        const today = new Date().toISOString().split(\"T\")[0];\n        const date = new Date(value);\n        const isValid = !isNaN(date.getTime());\n        let errorMessage = '';\n        if (!isValid) {\n            errorMessage = \"La date n'est pas valide.\";\n        }\n        else if (value < today) {\n            errorMessage = \"Date de départ doit être aujourd'hui ou plus tard.\";\n        }\n        return {\n            valid: isValid && value >= today,\n            errorMessage: errorMessage\n        };\n    },\n};\nconst isDateAfter = (startDate, endDate) => {\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    const isValid = start < end;\n    return {\n        valid: isValid,\n        errorMessage: isValid ? '' : \"Date d'arrivée doit être après la date de départ.\"\n    };\n};\n\n\n//# sourceURL=webpack://gpdumonde/./src/utils.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/cargaisons.ts");
/******/ 	
/******/ })()
;